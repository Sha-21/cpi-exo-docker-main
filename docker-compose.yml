version: '3'

services:
  # Conteneur base de données
  db:
    image: mongo
    container_name: db
    volumes:
      # Ce volume permettra de préserver les données si la base de données doit évoluer. Ici, on
      # se base uniquement sur les données dans le dump, et ce volume n'est pas forcément nécessaire
      - ./data:/data/db
      # On monte le dump de la base de données dans un dossier du conteneur
      - ./dump/test:/dump/
      # On monte le script mongorestore.sh dans le dossier /docker-entrypoint-initdb.d, qui sera
      # lancé automatiquement au démarrage du conteneur.
      # Ce dossier d'entrypoint est une convention Docker, qui est au moins respectée pour tous les
      # conteneurs de base de données
      - ./dump/mongorestore.sh:/docker-entrypoint-initdb.d/mongorestore.sh:ro

  # mongo-express
  mongo-express:
    container_name: mongo-express
    image: mongo-express
    ports:
      - "8081:8081"
    depends_on:
      - db
    restart: always
    environment:
      - ME_CONFIG_MONGODB_ADMINUSERNAME=toto
      - ME_CONFIG_MONGODB_ADMINPASSWORD=toto
      - ME_CONFIG_MONGODB_SERVER=mongo

  # Conteneur frontend
  front:
    container_name: docker-frontend
    build: ./front/.
    image: nginx:latest
    environment:
      PORT: 3000
      PROXY_API: http://localhost:8080/cpi-exo-docker
    ports:
      - "3000:3000"
    networks:
      - frontnet

  # Conteneur backend
  back:
    container_name: docker-backend
    build: ./back/.
    image: node:latest
    ports:
      - "8080:8080"
    environment:
      - MONGO_HOST=db
      - PORT=8080
    volumes:
      - /back:/usr/app
      - /back/node_modules:/usr/app/node_modules
    depends_on:
        - db
    networks:
      - backnet

networks:
  backnet:
    driver: bridge
  frontnet:
    driver: bridge